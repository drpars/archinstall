# interpreter for shell commands
set shell sh

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

# use enter for shell commands
map <enter> shell

set drawbox true
set ignorecase true
set icons true

# Custom Functions
cmd open ${{
    test -L $f && f=$(readlink -f $f)
    case $(file --mime-type $f -b) in
        text/*) $EDITOR $fx;;
        *) for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

cmd mkdir ${{
  printf "Directory Name: "
  read ans
  mkdir $ans
}}

cmd mkfile ${{
  printf "File Name: "
  read ans
  $EDITOR $ans
}}

cmd chmod ${{
  printf "Mode Bits: "
  read ans

  for file in "$fx"
  do
    chmod $ans $file
  done

  lf -remote 'send reload'
}}

cmd sudomkfile ${{
  printf "File Name: "
  read ans
  sudo $EDITOR $ans
}}

# cmd setwallpaper %cp "$f" ~/.config/wall.png && xwallpaper --zoom "$f"

# define a custom 'rename' command without prompt for overwrite
cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
map r push :rename<space>

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
# cmd unarchive ${{
#   case "$f" in
#       *.zip) unzip "$f" ;;
#       *.tar.gz) tar -xzvf "$f" ;;
#       *.tar.bz2) tar -xjvf "$f" ;;
#       *.tar) tar -xvf "$f" ;;
#       *) echo "Unsupported format" ;;
#   esac
# }}

# Archive bindings
cmd unarchive ${{
    # set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}
# compress
cmd zip %zip -r "$f" "$f"
cmd tar %tar cvf "$f.tar" "$f"
cmd targz %tar cvzf "$f.tar.gz" "$f"
cmd tarbz2 %tar cjvf "$f.tar.bz2" "$f"

# Trash cli bindings
cmd trash %trash-put $fx
# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
# cmd trash %set -f; mv $fx ~/.trash

cmd clear_trash %trash-empty

cmd restore_trash ${{
  trash-restore
}}

# Remove some defaults
map m
map t 
map n
map "'"
map '"'
map d
map c
map e
map f

# Bindings
# File Openers
map ee $$EDITOR "$f"
map u $view "$f"

# Archive Mappings
map az zip
map at tar
map ag targz
map au unarchive

# Trash Mappings
map <delete> trash
map tc clear_trash
map tr restore_trash

# Basic Functions
map . set hidden!
map D delete
map p paste
map x cut
map y copy
map o open
map mf mkfile
map mr sudomkfile
map md mkdir
map ch chmod
map bg setwallpaper
map h top
map l bottom
map R reload
map c clear
map u unselect

# Movement
map gb cd ~/Belgeler
map gi cd ~/Ä°ndirilenler
map gp cd ~/Resimler
map gc cd ~/.config
map gs cd ~/.local/bin
map gtr cd ~/.local/share/Trash/files
map gv cd /mnt/Veri
map gd cd /mnt/Data
map go cd /mnt/Oyunlar
